# solving the Euler Problems
import numpy as np
''' '''
# Question 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5,
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

multiples = []
sum = 0
for i in range(1, 1000):
    if i % 3 == 0 or i % 5 == 0:
        sum += i
print('Question 1 =', sum)  # 233168

# Question 2
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.

first = 1
second = 2
fib = 3
total = 2

while fib < 4000000:
    fib = first + second
    if fib % 2 == 0:
        total += fib
    first = second
    second = fib

print('Question 2 =', total)  # 4613732

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143


n = 600851475143
i = 2

while i * i < n:
    while n % i == 0:
        n = n / i
    i = i + 1

print('Question 3 =', int(n))  # 6857

# A palindromic number reads the same both ways. The largest palindrome
# made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.


def palindrome(a, b):
    """check to see if two numbers are palindromic"""
    c = a * b
    d = str(c)
    d = d[::-1]

    return c == int(d)


largest_found = 0
largest_a = 0
largest_b = 0

for a in range(999, 900, -1):
    b = 999
    found = False
    while found == False:
        found = palindrome(a, b)
        b -= 1

    if largest_found < (a * (b + 1)):
        largest_a = a
        largest_b = b + 1
        largest_found = largest_a * largest_b

print('Question 4 =', largest_found,
      '(', largest_a, largest_b, ')')  # 906609 ( 993 913 )


# 2520 is the smallest number that can be divided by each of the
# numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible
# by all of the numbers from 1 to 20?

divisible = False
start_num = 2520
step = 20


def check_divisible(num):
    check_list = [11, 13, 14, 16, 17, 18, 19, 20]
    for i in check_list:
        if num % i != 0:
            return False
    return True


# while not divisible:
#     divisible = check_divisible(start_num)
#    start_num += step

print('Question 5 =', start_num - step)  # 232792560

# The sum of the squares of the first ten natural numbers is,
# 12 + 22 + ... + 10^2 = 385
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)^2 = 552 = 3025
# Hence the difference between the sum of the squares of the first
# ten natural numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the
# first one hundred natural numbers and the square of the sum.

alist = np.arange(1,101,1)

#sum of squares
a = alist ** 2
a = np.sum(a)

# sqare of sum
b = np.sum(alist)
b = b ** 2

print('Question 6 =', b-a) # 25164150
